# dual_server.py

import asyncio
import threading
import uvicorn

import deifinitions
from monitoring_server.Endpoint_generator.dynamic_flask_app import create_app
from monitoring_server.Endpoint_generator.endpoint_generator import \
    endpoint_generator
from monitoring_server.SQL_generator.SQL_generator import generate_sql
from packages.recieve_spec_package.update import OpenAPIHandlerAPI

openapi_handler = OpenAPIHandlerAPI()


async def consume_spec():
    while True:
        spec = await openapi_handler.wait_for_spec()
        generate_sql(spec)
        endpoint_generator(spec)


def start_flask_server():
    flask_app = create_app()
    flask_app.run(host='0.0.0.0', port=deifinitions.MS_SERVER_PORT)


def start_fastapi_server():
    """Run FastAPI + consumer in an asyncio event loop inside a thread."""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(consume_spec())
    config = uvicorn.Config(openapi_handler.app, host="0.0.0.0",
                            port=deifinitions.SERVER_UPDATE_ENDPOINT_PORT)
    server = uvicorn.Server(config)
    loop.run_until_complete(server.serve())


def run_monitoring_backend():
    """Starts Flask autogenerated API and FastAPI update spec API in background threads."""

    # Start Flask in background thread
    flask_thread = threading.Thread(target=start_flask_server, daemon=True)
    flask_thread.start()

    # Start FastAPI in background thread with its own asyncio loop
    fastapi_thread = threading.Thread(target=start_fastapi_server, daemon=True)
    fastapi_thread.start()
